
	编译和运行方式说明
本文件夹包含3个子文件夹
n2为常规的时间复杂度为O(n^2)的方法
cpp为FFT的cpp实现
cuda为FFT的cuda实现
该3个方式均使用了大整数乘法来模拟多项式的乘法
--------------cuda/--------------
Linux:
1.	确认nvcc可用
2.	输入make clean
3.	输入make
4.	./cudaFFT
5.	输入想要进行运算的任意数字（该数字的长度小于1000000）
6.	输入想要进行运算的任意数字（该数字的长度小于1000000）
7.	等待计算完毕，输出的4个时间分别是bit reverse时间，乘数和被乘数的FFT时间和结果的IFFT的时间
8.	可以通过cat res来查看运算结果是否正确
[5,6,7,8]例子说明：
user:~/cuda$ ./cudaFFT
15
18
0.000072
0.000044
0.000036
0.000028
user:~/cuda$ cat res
270

WIN:
1.	配置VS
2.	代码运行
-----------------------------------

--------------cpp/-----------------
Linux:
1.	确认nvcc可用
2.	输入make clean
3.	输入make
4.	./cppFFT
5.	输入想要进行运算的任意数字（该数字的长度小于1000000）
6.	输入想要进行运算的任意数字（该数字的长度小于1000000）
7.	等待计算完毕，输出的4个时间分别是bit reverse时间，乘数和被乘数的FFT时间和结果的IFFT的时间
8.	可以通过cat res来查看运算结果是否正确
WIN:
1.	配置VS
2.	代码运行
-----------------------------------

--------------n2/-----------------
Linux:
1.	确认nvcc可用
2.	输入make clean
3.	输入make
4.	./n2mul
5.	输入想要进行运算的任意数字（该数字的长度小于1000000）
6.	输入想要进行运算的任意数字（该数字的长度小于1000000）
7.	等待计算完毕，输出的时间为运算时长
8.	n2不支持结果查看
WIN:
1.	配置VS
2.	代码运行
-----------------------------------